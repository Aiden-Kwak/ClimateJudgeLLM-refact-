@startuml
skinparam packageStyle rect

' Controller 패키지
package controller {
  class MainController {
    +__init__()
    +run(claim, data_folder)
    +convert_to_latex(text)
    +sanitize_latex_items(text)
    +sanitize_file_paths(text)
  }
}

' Model 패키지
interface LLMClient

package model {
  class LLMModel {
    +call_deepseek(prompt, model)
    +call_openai(prompt, model)
    +parse_response(response)
  }
  LLMModel ..|> LLMClient
}

' Service 패키지
package service {
  class BaseAgentService {
    -llm : LLMClient
    +_invoke(prompt, model_type)
  }
  class RagIndexService {
    +embed_resources(folderName)
    +query(resource, question, evidence_num)
  }
  class QAService {
    +generate_questions(claim)
  }
  class JuryService {
    +evaluate(questions, resource, claim)
  }
  class JuryCleanService {
    +_clean(jury_results_path, model_type)
  }
  class LawyerService {
    +analyze(jury_results_path, claim)
    +reply_brief(reply_path, claim)
  }
  class ProsecutorService {
    +analyze(jury_results_path, claim)
    +reply_brief(reply_path, claim)
  }
  class JudgeService {
    +prepare_input(...)
    +decide(judge_input_path, model_type)
  }
  class ClassificationService {
    +classify(judge_input_path, model_type)
  }
  class VerdictPdfService {
    +generate_pdf(context)
    +sanitize_latex(text)
    +fix_itemize(text)
    +fix_filename(text)
  }

  BaseAgentService <|-- LawyerService
  BaseAgentService <|-- ProsecutorService
  BaseAgentService <|-- JudgeService
  BaseAgentService <|-- ClassificationService
  
  RagIndexService ..> LLMModel
  QAService --> LLMModel
  JuryService --> RagIndexService
  JuryCleanService --> JuryService

  package prompt_builders {
    class LawyerPromptBuilder {
      +build_analysis_prompt(...)
      +build_reply_brief_prompt(...)
    }
    class ProsecutorPromptBuilder {
      +build_analysis_prompt(...)
      +build_reply_brief_prompt(...)
    }
    class JudgePromptBuilder {
      +build_decision_prompt(...)
    }
    class ClassificationPromptBuilder {
      +build_classification_prompt(...)
    }
    class JuryCleanerPromptBuilder {
      +build_cleaner_prompt(...)
    }
  }
  LawyerService --> LawyerPromptBuilder
  ProsecutorService --> ProsecutorPromptBuilder
  JudgeService --> JudgePromptBuilder
  ClassificationService --> ClassificationPromptBuilder
  JuryCleanService --> JuryCleanerPromptBuilder
}

' View 패키지
package view {
  class ConsoleView {
    +print_info(msg)
    +print_error(msg)
  }
  class FileView {
    +write_json(path, data)
    +write_text(path, content)
  }
}

' 의존 관계 및 실행 흐름
MainController --> ConsoleView
MainController --> FileView
MainController --> QAService
MainController --> RagIndexService
MainController --> JuryService
MainController --> JuryCleanService
MainController --> LawyerService
MainController --> ProsecutorService
MainController --> JudgeService
MainController --> ClassificationService
MainController --> VerdictPdfService

' 수정된 워크플로우
note "1. 배심원단이 질문 평가 후 증거 수집" as N1
note "2. 검사와 변호사가 배심원단 증거 분석" as N2
note "3. 검사와 변호사가 상호 반박 준비" as N3
note "4. 판사가 증거와 의견을 검토하여 판결" as N4
note "5. 분류 전문가가 판결 검토 및 점수 매김" as N5
note "6. PDF 보고서 생성" as N6

@enduml
